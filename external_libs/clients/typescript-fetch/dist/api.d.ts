/**
 * Inventory Management System
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: string;
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     *
     * @type {Date}
     * @memberof CategoryDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof CategoryDto
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CategoryDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CategoryDto
     */
    name?: string;
    /**
     *
     * @type {CategoryDto}
     * @memberof CategoryDto
     */
    parentCategory?: CategoryDto;
    /**
     *
     * @type {Array<ProductDto>}
     * @memberof CategoryDto
     */
    products?: Array<ProductDto>;
    /**
     *
     * @type {Array<CategoryDto>}
     * @memberof CategoryDto
     */
    subCategories?: Array<CategoryDto>;
    /**
     *
     * @type {SupplierDto}
     * @memberof CategoryDto
     */
    supplier?: SupplierDto;
    /**
     *
     * @type {Date}
     * @memberof CategoryDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     *
     * @type {string}
     * @memberof CustomerDto
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerDto
     */
    code?: string;
    /**
     *
     * @type {Date}
     * @memberof CustomerDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof CustomerDto
     */
    email?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerDto
     */
    id?: number;
    /**
     *
     * @type {Array<MovementDto>}
     * @memberof CustomerDto
     */
    movements?: Array<MovementDto>;
    /**
     *
     * @type {string}
     * @memberof CustomerDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerDto
     */
    phone?: string;
    /**
     *
     * @type {Date}
     * @memberof CustomerDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface MovementDetailDto
 */
export interface MovementDetailDto {
    /**
     *
     * @type {Date}
     * @memberof MovementDetailDto
     */
    createdAt?: Date;
    /**
     *
     * @type {number}
     * @memberof MovementDetailDto
     */
    id?: number;
    /**
     *
     * @type {MovementDto}
     * @memberof MovementDetailDto
     */
    movement?: MovementDto;
    /**
     *
     * @type {ProductDto}
     * @memberof MovementDetailDto
     */
    product?: ProductDto;
    /**
     *
     * @type {number}
     * @memberof MovementDetailDto
     */
    quantity?: number;
    /**
     *
     * @type {ProductRepositoryDto}
     * @memberof MovementDetailDto
     */
    sourceProductRepository?: ProductRepositoryDto;
    /**
     *
     * @type {ProductRepositoryDto}
     * @memberof MovementDetailDto
     */
    targetProductRepository?: ProductRepositoryDto;
    /**
     *
     * @type {Date}
     * @memberof MovementDetailDto
     */
    updatedAt?: Date;
    /**
     *
     * @type {number}
     * @memberof MovementDetailDto
     */
    value?: number;
}
/**
 *
 * @export
 * @interface MovementDto
 */
export interface MovementDto {
    /**
     *
     * @type {Array<MovementDto>}
     * @memberof MovementDto
     */
    childrenMovement?: Array<MovementDto>;
    /**
     *
     * @type {string}
     * @memberof MovementDto
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof MovementDto
     */
    comments?: string;
    /**
     *
     * @type {Date}
     * @memberof MovementDto
     */
    createdAt?: Date;
    /**
     *
     * @type {CustomerDto}
     * @memberof MovementDto
     */
    customer?: CustomerDto;
    /**
     *
     * @type {number}
     * @memberof MovementDto
     */
    id?: number;
    /**
     *
     * @type {MovementDto}
     * @memberof MovementDto
     */
    movement?: MovementDto;
    /**
     *
     * @type {Date}
     * @memberof MovementDto
     */
    movementDate?: Date;
    /**
     *
     * @type {Array<MovementDetailDto>}
     * @memberof MovementDto
     */
    movementDetails?: Array<MovementDetailDto>;
    /**
     *
     * @type {MovementTypeDto}
     * @memberof MovementDto
     */
    movementType?: MovementTypeDto;
    /**
     *
     * @type {SupplierDto}
     * @memberof MovementDto
     */
    supplier?: SupplierDto;
    /**
     *
     * @type {number}
     * @memberof MovementDto
     */
    totalValue?: number;
    /**
     *
     * @type {number}
     * @memberof MovementDto
     */
    type?: number;
    /**
     *
     * @type {Date}
     * @memberof MovementDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface MovementTypeDto
 */
export interface MovementTypeDto {
    /**
     *
     * @type {Date}
     * @memberof MovementTypeDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof MovementTypeDto
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof MovementTypeDto
     */
    id?: number;
    /**
     *
     * @type {Array<MovementDto>}
     * @memberof MovementTypeDto
     */
    movements?: Array<MovementDto>;
    /**
     *
     * @type {string}
     * @memberof MovementTypeDto
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof MovementTypeDto
     */
    parentMovementRequired?: boolean;
    /**
     *
     * @type {RepositoryDto}
     * @memberof MovementTypeDto
     */
    sourceRepository?: RepositoryDto;
    /**
     *
     * @type {RepositoryDto}
     * @memberof MovementTypeDto
     */
    targetRepository?: RepositoryDto;
    /**
     *
     * @type {Date}
     * @memberof MovementTypeDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     *
     * @type {CategoryDto}
     * @memberof ProductDto
     */
    category?: CategoryDto;
    /**
     *
     * @type {string}
     * @memberof ProductDto
     */
    code?: string;
    /**
     *
     * @type {Date}
     * @memberof ProductDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ProductDto
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ProductDto
     */
    id?: number;
    /**
     *
     * @type {Array<MovementDetailDto>}
     * @memberof ProductDto
     */
    movementDetails?: Array<MovementDetailDto>;
    /**
     *
     * @type {string}
     * @memberof ProductDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDto
     */
    photo?: string;
    /**
     *
     * @type {Array<ProductRepositoryDto>}
     * @memberof ProductDto
     */
    productRepositories?: Array<ProductRepositoryDto>;
    /**
     *
     * @type {SupplierDto}
     * @memberof ProductDto
     */
    supplier?: SupplierDto;
    /**
     *
     * @type {number}
     * @memberof ProductDto
     */
    unitType?: number;
    /**
     *
     * @type {Date}
     * @memberof ProductDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface ProductRepositoryDto
 */
export interface ProductRepositoryDto {
    /**
     *
     * @type {Date}
     * @memberof ProductRepositoryDto
     */
    createdAt?: Date;
    /**
     *
     * @type {number}
     * @memberof ProductRepositoryDto
     */
    currentQuantity?: number;
    /**
     *
     * @type {number}
     * @memberof ProductRepositoryDto
     */
    id?: number;
    /**
     *
     * @type {Array<MovementDetailDto>}
     * @memberof ProductRepositoryDto
     */
    negativeMovements?: Array<MovementDetailDto>;
    /**
     *
     * @type {Array<MovementDetailDto>}
     * @memberof ProductRepositoryDto
     */
    positiveMovements?: Array<MovementDetailDto>;
    /**
     *
     * @type {number}
     * @memberof ProductRepositoryDto
     */
    price?: number;
    /**
     *
     * @type {ProductDto}
     * @memberof ProductRepositoryDto
     */
    product?: ProductDto;
    /**
     *
     * @type {RepositoryDto}
     * @memberof ProductRepositoryDto
     */
    repository?: RepositoryDto;
    /**
     *
     * @type {Date}
     * @memberof ProductRepositoryDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface RepositoryDto
 */
export interface RepositoryDto {
    /**
     *
     * @type {Date}
     * @memberof RepositoryDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof RepositoryDto
     */
    description?: string;
    /**
     *
     * @type {boolean}
     * @memberof RepositoryDto
     */
    external?: boolean;
    /**
     *
     * @type {number}
     * @memberof RepositoryDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RepositoryDto
     */
    name?: string;
    /**
     *
     * @type {Array<ProductRepositoryDto>}
     * @memberof RepositoryDto
     */
    productRepositories?: Array<ProductRepositoryDto>;
    /**
     *
     * @type {Array<MovementTypeDto>}
     * @memberof RepositoryDto
     */
    sourceMovementTypes?: Array<MovementTypeDto>;
    /**
     *
     * @type {Array<MovementTypeDto>}
     * @memberof RepositoryDto
     */
    targetMovementTypes?: Array<MovementTypeDto>;
    /**
     *
     * @type {Date}
     * @memberof RepositoryDto
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface ResponseCanonicalCategoryDto
 */
export interface ResponseCanonicalCategoryDto {
    /**
     *
     * @type {CategoryDto}
     * @memberof ResponseCanonicalCategoryDto
     */
    response?: CategoryDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalCategoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalCustomerDto
 */
export interface ResponseCanonicalCustomerDto {
    /**
     *
     * @type {CustomerDto}
     * @memberof ResponseCanonicalCustomerDto
     */
    response?: CustomerDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalCustomerDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListCategoryDto
 */
export interface ResponseCanonicalListCategoryDto {
    /**
     *
     * @type {Array<CategoryDto>}
     * @memberof ResponseCanonicalListCategoryDto
     */
    response?: Array<CategoryDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListCategoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListCustomerDto
 */
export interface ResponseCanonicalListCustomerDto {
    /**
     *
     * @type {Array<CustomerDto>}
     * @memberof ResponseCanonicalListCustomerDto
     */
    response?: Array<CustomerDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListCustomerDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListMovementDetailDto
 */
export interface ResponseCanonicalListMovementDetailDto {
    /**
     *
     * @type {Array<MovementDetailDto>}
     * @memberof ResponseCanonicalListMovementDetailDto
     */
    response?: Array<MovementDetailDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListMovementDetailDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListMovementDto
 */
export interface ResponseCanonicalListMovementDto {
    /**
     *
     * @type {Array<MovementDto>}
     * @memberof ResponseCanonicalListMovementDto
     */
    response?: Array<MovementDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListMovementDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListMovementTypeDto
 */
export interface ResponseCanonicalListMovementTypeDto {
    /**
     *
     * @type {Array<MovementTypeDto>}
     * @memberof ResponseCanonicalListMovementTypeDto
     */
    response?: Array<MovementTypeDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListMovementTypeDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListProductDto
 */
export interface ResponseCanonicalListProductDto {
    /**
     *
     * @type {Array<ProductDto>}
     * @memberof ResponseCanonicalListProductDto
     */
    response?: Array<ProductDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListProductDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListProductRepositoryDto
 */
export interface ResponseCanonicalListProductRepositoryDto {
    /**
     *
     * @type {Array<ProductRepositoryDto>}
     * @memberof ResponseCanonicalListProductRepositoryDto
     */
    response?: Array<ProductRepositoryDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListProductRepositoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListRepositoryDto
 */
export interface ResponseCanonicalListRepositoryDto {
    /**
     *
     * @type {Array<RepositoryDto>}
     * @memberof ResponseCanonicalListRepositoryDto
     */
    response?: Array<RepositoryDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListRepositoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalListSupplierDto
 */
export interface ResponseCanonicalListSupplierDto {
    /**
     *
     * @type {Array<SupplierDto>}
     * @memberof ResponseCanonicalListSupplierDto
     */
    response?: Array<SupplierDto>;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalListSupplierDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalMovementDetailDto
 */
export interface ResponseCanonicalMovementDetailDto {
    /**
     *
     * @type {MovementDetailDto}
     * @memberof ResponseCanonicalMovementDetailDto
     */
    response?: MovementDetailDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalMovementDetailDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalMovementDto
 */
export interface ResponseCanonicalMovementDto {
    /**
     *
     * @type {MovementDto}
     * @memberof ResponseCanonicalMovementDto
     */
    response?: MovementDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalMovementDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalMovementTypeDto
 */
export interface ResponseCanonicalMovementTypeDto {
    /**
     *
     * @type {MovementTypeDto}
     * @memberof ResponseCanonicalMovementTypeDto
     */
    response?: MovementTypeDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalMovementTypeDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalProductDto
 */
export interface ResponseCanonicalProductDto {
    /**
     *
     * @type {ProductDto}
     * @memberof ResponseCanonicalProductDto
     */
    response?: ProductDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalProductDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalProductRepositoryDto
 */
export interface ResponseCanonicalProductRepositoryDto {
    /**
     *
     * @type {ProductRepositoryDto}
     * @memberof ResponseCanonicalProductRepositoryDto
     */
    response?: ProductRepositoryDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalProductRepositoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalRepositoryDto
 */
export interface ResponseCanonicalRepositoryDto {
    /**
     *
     * @type {RepositoryDto}
     * @memberof ResponseCanonicalRepositoryDto
     */
    response?: RepositoryDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalRepositoryDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalSupplierDto
 */
export interface ResponseCanonicalSupplierDto {
    /**
     *
     * @type {SupplierDto}
     * @memberof ResponseCanonicalSupplierDto
     */
    response?: SupplierDto;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalSupplierDto
     */
    status?: number;
}
/**
 *
 * @export
 * @interface ResponseCanonicalstring
 */
export interface ResponseCanonicalstring {
    /**
     *
     * @type {string}
     * @memberof ResponseCanonicalstring
     */
    response?: string;
    /**
     *
     * @type {number}
     * @memberof ResponseCanonicalstring
     */
    status?: number;
}
/**
 *
 * @export
 * @interface SupplierDto
 */
export interface SupplierDto {
    /**
     *
     * @type {string}
     * @memberof SupplierDto
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof SupplierDto
     */
    code?: string;
    /**
     *
     * @type {Date}
     * @memberof SupplierDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof SupplierDto
     */
    email?: string;
    /**
     *
     * @type {number}
     * @memberof SupplierDto
     */
    id?: number;
    /**
     *
     * @type {Array<MovementDto>}
     * @memberof SupplierDto
     */
    movements?: Array<MovementDto>;
    /**
     *
     * @type {string}
     * @memberof SupplierDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SupplierDto
     */
    phone?: string;
    /**
     *
     * @type {Array<ProductDto>}
     * @memberof SupplierDto
     */
    products?: Array<ProductDto>;
    /**
     *
     * @type {Date}
     * @memberof SupplierDto
     */
    updatedAt?: Date;
}
/**
 * CategoryControllerApi - fetch parameter creator
 * @export
 */
export declare const CategoryControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createCategory
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(entityParam: CategoryDto, options?: any): FetchArgs;
    /**
     *
     * @summary findCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategory(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listCategories
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [parentCategoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories({ skip, limit, from, to, name, description, parentCategoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        parentCategoryId?: number | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateCategory
     * @param {number} id id
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(id: number, entityParam: CategoryDto, options?: any): FetchArgs;
};
/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export declare const CategoryControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createCategory
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(entityParam: CategoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary findCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategory(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary listCategories
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [parentCategoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories({ skip, limit, from, to, name, description, parentCategoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        parentCategoryId?: number | undefined;
        options?: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListCategoryDto>;
    /**
     *
     * @summary updateCategory
     * @param {number} id id
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(id: number, entityParam: CategoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCategoryDto>;
};
/**
 * CategoryControllerApi - factory interface
 * @export
 */
export declare const CategoryControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createCategory
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(entityParam: CategoryDto, options?: any): Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary findCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategory(id: number, options?: any): Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary listCategories
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [parentCategoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories({ skip, limit, from, to, name, description, parentCategoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        parentCategoryId?: number | undefined;
        options?: any;
    }): Promise<ResponseCanonicalListCategoryDto>;
    /**
     *
     * @summary updateCategory
     * @param {number} id id
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(id: number, entityParam: CategoryDto, options?: any): Promise<ResponseCanonicalCategoryDto>;
};
/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export declare class CategoryControllerApi extends BaseAPI {
    /**
     *
     * @summary createCategory
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    createCategory(entityParam: CategoryDto, options?: any): Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary findCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    findCategory(id: number, options?: any): Promise<ResponseCanonicalCategoryDto>;
    /**
     *
     * @summary listCategories
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [parentCategoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    listCategories({ skip, limit, from, to, name, description, parentCategoryId, options }: {
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        description?: string;
        parentCategoryId?: number;
        options?: any;
    }): Promise<ResponseCanonicalListCategoryDto>;
    /**
     *
     * @summary updateCategory
     * @param {number} id id
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    updateCategory(id: number, entityParam: CategoryDto, options?: any): Promise<ResponseCanonicalCategoryDto>;
}
/**
 * CustomerControllerApi - fetch parameter creator
 * @export
 */
export declare const CustomerControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createCustomer
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(entityParam: CustomerDto, options?: any): FetchArgs;
    /**
     *
     * @summary findCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomer(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listCustomers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers({ skip, limit, from, to, name, movementId, productId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateCustomer
     * @param {number} id id
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(id: number, entityParam: CustomerDto, options?: any): FetchArgs;
};
/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export declare const CustomerControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createCustomer
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(entityParam: CustomerDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary findCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomer(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary listCustomers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers({ skip, limit, from, to, name, movementId, productId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListCustomerDto>;
    /**
     *
     * @summary updateCustomer
     * @param {number} id id
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(id: number, entityParam: CustomerDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalCustomerDto>;
};
/**
 * CustomerControllerApi - factory interface
 * @export
 */
export declare const CustomerControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createCustomer
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(entityParam: CustomerDto, options?: any): Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary findCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomer(id: number, options?: any): Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary listCustomers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomers({ skip, limit, from, to, name, movementId, productId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options: any;
    }): Promise<ResponseCanonicalListCustomerDto>;
    /**
     *
     * @summary updateCustomer
     * @param {number} id id
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(id: number, entityParam: CustomerDto, options?: any): Promise<ResponseCanonicalCustomerDto>;
};
/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export declare class CustomerControllerApi extends BaseAPI {
    /**
     *
     * @summary createCustomer
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    createCustomer(entityParam: CustomerDto, options?: any): Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary findCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    findCustomer(id: number, options?: any): Promise<ResponseCanonicalCustomerDto>;
    /**
     *
     * @summary listCustomers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    listCustomers({ skip, limit, from, to, name, movementId, productId, options }: {
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        movementId?: number;
        productId?: number;
        options: any;
    }): Promise<ResponseCanonicalListCustomerDto>;
    /**
     *
     * @summary updateCustomer
     * @param {number} id id
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    updateCustomer(id: number, entityParam: CustomerDto, options?: any): Promise<ResponseCanonicalCustomerDto>;
}
/**
 * MovementControllerApi - fetch parameter creator
 * @export
 */
export declare const MovementControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary findMovement
     * @param {number} movementId movementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovement(movementId: number, options?: any): FetchArgs;
    /**
     *
     * @summary generateMovement
     * @param {MovementDto} movementInfo movementInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateMovement(movementInfo: MovementDto, options?: any): FetchArgs;
    /**
     *
     * @summary listMovements
     * @param {Array<number>} [movementDetailIds]
     * @param {Array<number>} [productIds]
     * @param {Array<number>} [movementTypeIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {number} [customerId]
     * @param {number} [supplierId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovements({ movementDetailIds, productIds, movementTypeIds, skip, limit, from, to, sourceRepositoryId, targetRepositoryId, customerId, supplierId, options }: {
        movementDetailIds?: number[] | undefined;
        productIds?: number[] | undefined;
        movementTypeIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        customerId?: number | undefined;
        supplierId?: number | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary rollbackMovement
     * @param {number} parentMovementId parentMovementId
     * @param {MovementDto} headerInfo headerInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollbackMovement(parentMovementId: number, headerInfo: MovementDto, options?: any): FetchArgs;
};
/**
 * MovementControllerApi - functional programming interface
 * @export
 */
export declare const MovementControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary findMovement
     * @param {number} movementId movementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovement(movementId: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary generateMovement
     * @param {MovementDto} movementInfo movementInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateMovement(movementInfo: MovementDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary listMovements
     * @param {Array<number>} [movementDetailIds]
     * @param {Array<number>} [productIds]
     * @param {Array<number>} [movementTypeIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {number} [customerId]
     * @param {number} [supplierId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovements({ movementDetailIds, productIds, movementTypeIds, skip, limit, from, to, sourceRepositoryId, targetRepositoryId, customerId, supplierId, options }: {
        movementDetailIds?: number[] | undefined;
        productIds?: number[] | undefined;
        movementTypeIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        customerId?: number | undefined;
        supplierId?: number | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListMovementDto>;
    /**
     *
     * @summary rollbackMovement
     * @param {number} parentMovementId parentMovementId
     * @param {MovementDto} headerInfo headerInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollbackMovement(parentMovementId: number, headerInfo: MovementDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDto>;
};
/**
 * MovementControllerApi - factory interface
 * @export
 */
export declare const MovementControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary findMovement
     * @param {number} movementId movementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovement(movementId: number, options?: any): Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary generateMovement
     * @param {MovementDto} movementInfo movementInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateMovement(movementInfo: MovementDto, options?: any): Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary listMovements
     * @param {Array<number>} [movementDetailIds]
     * @param {Array<number>} [productIds]
     * @param {Array<number>} [movementTypeIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {number} [customerId]
     * @param {number} [supplierId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovements({ movementDetailIds, productIds, movementTypeIds, skip, limit, from, to, sourceRepositoryId, targetRepositoryId, customerId, supplierId, options }: {
        movementDetailIds?: number[] | undefined;
        productIds?: number[] | undefined;
        movementTypeIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        customerId?: number | undefined;
        supplierId?: number | undefined;
        options: any;
    }): Promise<ResponseCanonicalListMovementDto>;
    /**
     *
     * @summary rollbackMovement
     * @param {number} parentMovementId parentMovementId
     * @param {MovementDto} headerInfo headerInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rollbackMovement(parentMovementId: number, headerInfo: MovementDto, options?: any): Promise<ResponseCanonicalMovementDto>;
};
/**
 * MovementControllerApi - object-oriented interface
 * @export
 * @class MovementControllerApi
 * @extends {BaseAPI}
 */
export declare class MovementControllerApi extends BaseAPI {
    /**
     *
     * @summary findMovement
     * @param {number} movementId movementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    findMovement(movementId: number, options?: any): Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary generateMovement
     * @param {MovementDto} movementInfo movementInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    generateMovement(movementInfo: MovementDto, options?: any): Promise<ResponseCanonicalMovementDto>;
    /**
     *
     * @summary listMovements
     * @param {Array<number>} [movementDetailIds]
     * @param {Array<number>} [productIds]
     * @param {Array<number>} [movementTypeIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {number} [customerId]
     * @param {number} [supplierId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    listMovements({ movementDetailIds, productIds, movementTypeIds, skip, limit, from, to, sourceRepositoryId, targetRepositoryId, customerId, supplierId, options }: {
        movementDetailIds?: Array<number>;
        productIds?: Array<number>;
        movementTypeIds?: Array<number>;
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        sourceRepositoryId?: number;
        targetRepositoryId?: number;
        customerId?: number;
        supplierId?: number;
        options: any;
    }): Promise<ResponseCanonicalListMovementDto>;
    /**
     *
     * @summary rollbackMovement
     * @param {number} parentMovementId parentMovementId
     * @param {MovementDto} headerInfo headerInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    rollbackMovement(parentMovementId: number, headerInfo: MovementDto, options?: any): Promise<ResponseCanonicalMovementDto>;
}
/**
 * MovementDetailControllerApi - fetch parameter creator
 * @export
 */
export declare const MovementDetailControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createMovementDetail
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementDetail(entityParam: MovementDetailDto, options?: any): FetchArgs;
    /**
     *
     * @summary findMovementDetail
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementDetail(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listMovementDetails
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [movementId]
     * @param {boolean} [omitPositive]
     * @param {boolean} [omitNegative]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementDetails({ productIds, skip, limit, from, to, movementId, omitPositive, omitNegative, sourceRepositoryId, targetRepositoryId, options }: {
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        movementId?: number | undefined;
        omitPositive?: boolean | undefined;
        omitNegative?: boolean | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateMovementDetail
     * @param {number} id id
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementDetail(id: number, entityParam: MovementDetailDto, options?: any): FetchArgs;
};
/**
 * MovementDetailControllerApi - functional programming interface
 * @export
 */
export declare const MovementDetailControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createMovementDetail
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementDetail(entityParam: MovementDetailDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary findMovementDetail
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementDetail(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary listMovementDetails
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [movementId]
     * @param {boolean} [omitPositive]
     * @param {boolean} [omitNegative]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementDetails({ productIds, skip, limit, from, to, movementId, omitPositive, omitNegative, sourceRepositoryId, targetRepositoryId, options }: {
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        movementId?: number | undefined;
        omitPositive?: boolean | undefined;
        omitNegative?: boolean | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListMovementDetailDto>;
    /**
     *
     * @summary updateMovementDetail
     * @param {number} id id
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementDetail(id: number, entityParam: MovementDetailDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementDetailDto>;
};
/**
 * MovementDetailControllerApi - factory interface
 * @export
 */
export declare const MovementDetailControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createMovementDetail
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementDetail(entityParam: MovementDetailDto, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary findMovementDetail
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementDetail(id: number, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary listMovementDetails
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [movementId]
     * @param {boolean} [omitPositive]
     * @param {boolean} [omitNegative]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementDetails({ productIds, skip, limit, from, to, movementId, omitPositive, omitNegative, sourceRepositoryId, targetRepositoryId, options }: {
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        movementId?: number | undefined;
        omitPositive?: boolean | undefined;
        omitNegative?: boolean | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): Promise<ResponseCanonicalListMovementDetailDto>;
    /**
     *
     * @summary updateMovementDetail
     * @param {number} id id
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementDetail(id: number, entityParam: MovementDetailDto, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
};
/**
 * MovementDetailControllerApi - object-oriented interface
 * @export
 * @class MovementDetailControllerApi
 * @extends {BaseAPI}
 */
export declare class MovementDetailControllerApi extends BaseAPI {
    /**
     *
     * @summary createMovementDetail
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    createMovementDetail(entityParam: MovementDetailDto, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary findMovementDetail
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    findMovementDetail(id: number, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
    /**
     *
     * @summary listMovementDetails
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [movementId]
     * @param {boolean} [omitPositive]
     * @param {boolean} [omitNegative]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    listMovementDetails({ productIds, skip, limit, from, to, movementId, omitPositive, omitNegative, sourceRepositoryId, targetRepositoryId, options }: {
        productIds?: Array<number>;
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        movementId?: number;
        omitPositive?: boolean;
        omitNegative?: boolean;
        sourceRepositoryId?: number;
        targetRepositoryId?: number;
        options: any;
    }): Promise<ResponseCanonicalListMovementDetailDto>;
    /**
     *
     * @summary updateMovementDetail
     * @param {number} id id
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    updateMovementDetail(id: number, entityParam: MovementDetailDto, options?: any): Promise<ResponseCanonicalMovementDetailDto>;
}
/**
 * MovementTypeControllerApi - fetch parameter creator
 * @export
 */
export declare const MovementTypeControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createMovementType
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementType(entityParam: MovementTypeDto, options?: any): FetchArgs;
    /**
     *
     * @summary findMovementType
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementType(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listMovementTypes
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementTypes({ skip, limit, from, to, name, description, sourceRepositoryId, targetRepositoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateMovementType
     * @param {number} id id
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementType(id: number, entityParam: MovementTypeDto, options?: any): FetchArgs;
};
/**
 * MovementTypeControllerApi - functional programming interface
 * @export
 */
export declare const MovementTypeControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createMovementType
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementType(entityParam: MovementTypeDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary findMovementType
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementType(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary listMovementTypes
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementTypes({ skip, limit, from, to, name, description, sourceRepositoryId, targetRepositoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListMovementTypeDto>;
    /**
     *
     * @summary updateMovementType
     * @param {number} id id
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementType(id: number, entityParam: MovementTypeDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalMovementTypeDto>;
};
/**
 * MovementTypeControllerApi - factory interface
 * @export
 */
export declare const MovementTypeControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createMovementType
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMovementType(entityParam: MovementTypeDto, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary findMovementType
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMovementType(id: number, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary listMovementTypes
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMovementTypes({ skip, limit, from, to, name, description, sourceRepositoryId, targetRepositoryId, options }: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        sourceRepositoryId?: number | undefined;
        targetRepositoryId?: number | undefined;
        options: any;
    }): Promise<ResponseCanonicalListMovementTypeDto>;
    /**
     *
     * @summary updateMovementType
     * @param {number} id id
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMovementType(id: number, entityParam: MovementTypeDto, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
};
/**
 * MovementTypeControllerApi - object-oriented interface
 * @export
 * @class MovementTypeControllerApi
 * @extends {BaseAPI}
 */
export declare class MovementTypeControllerApi extends BaseAPI {
    /**
     *
     * @summary createMovementType
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    createMovementType(entityParam: MovementTypeDto, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary findMovementType
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    findMovementType(id: number, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
    /**
     *
     * @summary listMovementTypes
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    listMovementTypes({ skip, limit, from, to, name, description, sourceRepositoryId, targetRepositoryId, options }: {
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        description?: string;
        sourceRepositoryId?: number;
        targetRepositoryId?: number;
        options: any;
    }): Promise<ResponseCanonicalListMovementTypeDto>;
    /**
     *
     * @summary updateMovementType
     * @param {number} id id
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    updateMovementType(id: number, entityParam: MovementTypeDto, options?: any): Promise<ResponseCanonicalMovementTypeDto>;
}
/**
 * ProductControllerApi - fetch parameter creator
 * @export
 */
export declare const ProductControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createProduct
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(entityParam: ProductDto, options?: any): FetchArgs;
    /**
     *
     * @summary findProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listProducts
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProducts({ sourceSupplierIds, customerIds, supplierIds, categoryIds, skip, limit, from, to, name, description, options }: {
        sourceSupplierIds?: number[] | undefined;
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateProduct
     * @param {number} id id
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(id: number, entityParam: ProductDto, options?: any): FetchArgs;
};
/**
 * ProductControllerApi - functional programming interface
 * @export
 */
export declare const ProductControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createProduct
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(entityParam: ProductDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary findProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary listProducts
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProducts({ sourceSupplierIds, customerIds, supplierIds, categoryIds, skip, limit, from, to, name, description, options }: {
        sourceSupplierIds?: number[] | undefined;
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListProductDto>;
    /**
     *
     * @summary updateProduct
     * @param {number} id id
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(id: number, entityParam: ProductDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductDto>;
};
/**
 * ProductControllerApi - factory interface
 * @export
 */
export declare const ProductControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createProduct
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(entityParam: ProductDto, options?: any): Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary findProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProduct(id: number, options?: any): Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary listProducts
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProducts({ sourceSupplierIds, customerIds, supplierIds, categoryIds, skip, limit, from, to, name, description, options }: {
        sourceSupplierIds?: number[] | undefined;
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options: any;
    }): Promise<ResponseCanonicalListProductDto>;
    /**
     *
     * @summary updateProduct
     * @param {number} id id
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(id: number, entityParam: ProductDto, options?: any): Promise<ResponseCanonicalProductDto>;
};
/**
 * ProductControllerApi - object-oriented interface
 * @export
 * @class ProductControllerApi
 * @extends {BaseAPI}
 */
export declare class ProductControllerApi extends BaseAPI {
    /**
     *
     * @summary createProduct
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    createProduct(entityParam: ProductDto, options?: any): Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary findProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    findProduct(id: number, options?: any): Promise<ResponseCanonicalProductDto>;
    /**
     *
     * @summary listProducts
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    listProducts({ sourceSupplierIds, customerIds, supplierIds, categoryIds, skip, limit, from, to, name, description, options }: {
        sourceSupplierIds?: Array<number>;
        customerIds?: Array<number>;
        supplierIds?: Array<number>;
        categoryIds?: Array<number>;
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        description?: string;
        options: any;
    }): Promise<ResponseCanonicalListProductDto>;
    /**
     *
     * @summary updateProduct
     * @param {number} id id
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    updateProduct(id: number, entityParam: ProductDto, options?: any): Promise<ResponseCanonicalProductDto>;
}
/**
 * ProductRepositoryControllerApi - fetch parameter creator
 * @export
 */
export declare const ProductRepositoryControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createProductRepository
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductRepository(entityParam: ProductRepositoryDto, options?: any): FetchArgs;
    /**
     *
     * @summary findProductRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductRepository(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listProductRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [repositoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductRepositories({ customerIds, supplierIds, sourceSupplierIds, categoryIds, repositoryIds, productIds, skip, limit, from, to, options }: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        sourceSupplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        repositoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        options: any;
    }): FetchArgs;
    /**
     *
     * @summary updateProductRepository
     * @param {number} id id
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductRepository(id: number, entityParam: ProductRepositoryDto, options?: any): FetchArgs;
};
/**
 * ProductRepositoryControllerApi - functional programming interface
 * @export
 */
export declare const ProductRepositoryControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createProductRepository
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductRepository(entityParam: ProductRepositoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary findProductRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductRepository(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary listProductRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [repositoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductRepositories({ customerIds, supplierIds, sourceSupplierIds, categoryIds, repositoryIds, productIds, skip, limit, from, to, options }: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        sourceSupplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        repositoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        options: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListProductRepositoryDto>;
    /**
     *
     * @summary updateProductRepository
     * @param {number} id id
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductRepository(id: number, entityParam: ProductRepositoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalProductRepositoryDto>;
};
/**
 * ProductRepositoryControllerApi - factory interface
 * @export
 */
export declare const ProductRepositoryControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createProductRepository
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductRepository(entityParam: ProductRepositoryDto, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary findProductRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductRepository(id: number, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary listProductRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [repositoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductRepositories({ customerIds, supplierIds, sourceSupplierIds, categoryIds, repositoryIds, productIds, skip, limit, from, to, options }?: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        sourceSupplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        repositoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        options?: any;
    }): Promise<ResponseCanonicalListProductRepositoryDto>;
    /**
     *
     * @summary updateProductRepository
     * @param {number} id id
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductRepository(id: number, entityParam: ProductRepositoryDto, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
};
/**
 * ProductRepositoryControllerApi - object-oriented interface
 * @export
 * @class ProductRepositoryControllerApi
 * @extends {BaseAPI}
 */
export declare class ProductRepositoryControllerApi extends BaseAPI {
    /**
     *
     * @summary createProductRepository
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    createProductRepository(entityParam: ProductRepositoryDto, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary findProductRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    findProductRepository(id: number, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
    /**
     *
     * @summary listProductRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [repositoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    listProductRepositories({ customerIds, supplierIds, sourceSupplierIds, categoryIds, repositoryIds, productIds, skip, limit, from, to, options }?: {
        customerIds?: Array<number>;
        supplierIds?: Array<number>;
        sourceSupplierIds?: Array<number>;
        categoryIds?: Array<number>;
        repositoryIds?: Array<number>;
        productIds?: Array<number>;
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        options?: any;
    }): Promise<ResponseCanonicalListProductRepositoryDto>;
    /**
     *
     * @summary updateProductRepository
     * @param {number} id id
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    updateProductRepository(id: number, entityParam: ProductRepositoryDto, options?: any): Promise<ResponseCanonicalProductRepositoryDto>;
}
/**
 * RepositoryControllerApi - fetch parameter creator
 * @export
 */
export declare const RepositoryControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createRepository
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRepository(entityParam: RepositoryDto, options?: any): FetchArgs;
    /**
     *
     * @summary findRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRepository(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRepositories({ customerIds, supplierIds, categoryIds, productIds, skip, limit, from, to, name, description, options }: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options?: any;
    }): FetchArgs;
    /**
     *
     * @summary updateRepository
     * @param {number} id id
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRepository(id: number, entityParam: RepositoryDto, options?: any): FetchArgs;
};
/**
 * RepositoryControllerApi - functional programming interface
 * @export
 */
export declare const RepositoryControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createRepository
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRepository(entityParam: RepositoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary findRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRepository(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary listRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRepositories({ customerIds, supplierIds, categoryIds, productIds, skip, limit, from, to, name, description, options }?: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options?: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListRepositoryDto>;
    /**
     *
     * @summary updateRepository
     * @param {number} id id
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRepository(id: number, entityParam: RepositoryDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalRepositoryDto>;
};
/**
 * RepositoryControllerApi - factory interface
 * @export
 */
export declare const RepositoryControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createRepository
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRepository(entityParam: RepositoryDto, options?: any): Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary findRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findRepository(id: number, options?: any): Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary listRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRepositories({ customerIds, supplierIds, categoryIds, productIds, skip, limit, from, to, name, description, options }?: {
        customerIds?: number[] | undefined;
        supplierIds?: number[] | undefined;
        categoryIds?: number[] | undefined;
        productIds?: number[] | undefined;
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        description?: string | undefined;
        options?: any;
    }): Promise<ResponseCanonicalListRepositoryDto>;
    /**
     *
     * @summary updateRepository
     * @param {number} id id
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRepository(id: number, entityParam: RepositoryDto, options?: any): Promise<ResponseCanonicalRepositoryDto>;
};
/**
 * RepositoryControllerApi - object-oriented interface
 * @export
 * @class RepositoryControllerApi
 * @extends {BaseAPI}
 */
export declare class RepositoryControllerApi extends BaseAPI {
    /**
     *
     * @summary createRepository
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    createRepository(entityParam: RepositoryDto, options?: any): Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary findRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    findRepository(id: number, options?: any): Promise<ResponseCanonicalRepositoryDto>;
    /**
     *
     * @summary listRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    listRepositories({ customerIds, supplierIds, categoryIds, productIds, skip, limit, from, to, name, description, options }?: {
        customerIds?: Array<number>;
        supplierIds?: Array<number>;
        categoryIds?: Array<number>;
        productIds?: Array<number>;
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        description?: string;
        options?: any;
    }): Promise<ResponseCanonicalListRepositoryDto>;
    /**
     *
     * @summary updateRepository
     * @param {number} id id
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    updateRepository(id: number, entityParam: RepositoryDto, options?: any): Promise<ResponseCanonicalRepositoryDto>;
}
/**
 * RootControllerApi - fetch parameter creator
 * @export
 */
export declare const RootControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary heartBeat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartBeat(options?: any): FetchArgs;
};
/**
 * RootControllerApi - functional programming interface
 * @export
 */
export declare const RootControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary heartBeat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartBeat(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalstring>;
};
/**
 * RootControllerApi - factory interface
 * @export
 */
export declare const RootControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary heartBeat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartBeat(options?: any): Promise<ResponseCanonicalstring>;
};
/**
 * RootControllerApi - object-oriented interface
 * @export
 * @class RootControllerApi
 * @extends {BaseAPI}
 */
export declare class RootControllerApi extends BaseAPI {
    /**
     *
     * @summary heartBeat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootControllerApi
     */
    heartBeat(options?: any): Promise<ResponseCanonicalstring>;
}
/**
 * SupplierControllerApi - fetch parameter creator
 * @export
 */
export declare const SupplierControllerApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createSupplier
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupplier(entityParam: SupplierDto, options?: any): FetchArgs;
    /**
     *
     * @summary findSupplier
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSupplier(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary listSuppliers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSuppliers({ skip, limit, from, to, name, movementId, productId, options }?: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options?: any;
    }): FetchArgs;
    /**
     *
     * @summary updateSupplier
     * @param {number} id id
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupplier(id: number, entityParam: SupplierDto, options?: any): FetchArgs;
};
/**
 * SupplierControllerApi - functional programming interface
 * @export
 */
export declare const SupplierControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary createSupplier
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupplier(entityParam: SupplierDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary findSupplier
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSupplier(id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary listSuppliers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSuppliers({ skip, limit, from, to, name, movementId, productId, options }?: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options?: any;
    }): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalListSupplierDto>;
    /**
     *
     * @summary updateSupplier
     * @param {number} id id
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupplier(id: number, entityParam: SupplierDto, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ResponseCanonicalSupplierDto>;
};
/**
 * SupplierControllerApi - factory interface
 * @export
 */
export declare const SupplierControllerApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary createSupplier
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSupplier(entityParam: SupplierDto, options?: any): Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary findSupplier
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSupplier(id: number, options?: any): Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary listSuppliers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSuppliers({ skip, limit, from, to, name, movementId, productId, options }?: {
        skip?: number | undefined;
        limit?: number | undefined;
        from?: Date | undefined;
        to?: Date | undefined;
        name?: string | undefined;
        movementId?: number | undefined;
        productId?: number | undefined;
        options?: any;
    }): Promise<ResponseCanonicalListSupplierDto>;
    /**
     *
     * @summary updateSupplier
     * @param {number} id id
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupplier(id: number, entityParam: SupplierDto, options?: any): Promise<ResponseCanonicalSupplierDto>;
};
/**
 * SupplierControllerApi - object-oriented interface
 * @export
 * @class SupplierControllerApi
 * @extends {BaseAPI}
 */
export declare class SupplierControllerApi extends BaseAPI {
    /**
     *
     * @summary createSupplier
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    createSupplier(entityParam: SupplierDto, options?: any): Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary findSupplier
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    findSupplier(id: number, options?: any): Promise<ResponseCanonicalSupplierDto>;
    /**
     *
     * @summary listSuppliers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    listSuppliers({ skip, limit, from, to, name, movementId, productId, options }?: {
        skip?: number;
        limit?: number;
        from?: Date;
        to?: Date;
        name?: string;
        movementId?: number;
        productId?: number;
        options?: any;
    }): Promise<ResponseCanonicalListSupplierDto>;
    /**
     *
     * @summary updateSupplier
     * @param {number} id id
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    updateSupplier(id: number, entityParam: SupplierDto, options?: any): Promise<ResponseCanonicalSupplierDto>;
}
