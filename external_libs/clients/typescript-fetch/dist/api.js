"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Inventory Management System
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://localhost:9091".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
        else {
            this.configuration = {};
            this.basePath = this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * CategoryControllerApi - fetch parameter creator
 * @export
 */
exports.CategoryControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createCategory
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createCategory.');
            }
            var localVarPath = "/categories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CategoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategory: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findCategory.');
            }
            var localVarPath = "/categories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listCategories
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [parentCategoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, parentCategoryId = _a.parentCategoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/categories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (parentCategoryId !== undefined) {
                localVarQueryParameter['parentCategoryId'] = parentCategoryId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateCategory
         * @param {number} id id
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCategory.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateCategory.');
            }
            var localVarPath = "/categories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CategoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
exports.CategoryControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createCategory
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (entityParam, options) {
            var localVarFetchArgs = exports.CategoryControllerApiFetchParamCreator(configuration).createCategory(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategory: function (id, options) {
            var localVarFetchArgs = exports.CategoryControllerApiFetchParamCreator(configuration).findCategory(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listCategories
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [parentCategoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, parentCategoryId = _a.parentCategoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.CategoryControllerApiFetchParamCreator(configuration).listCategories({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, parentCategoryId: parentCategoryId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateCategory
         * @param {number} id id
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (id, entityParam, options) {
            var localVarFetchArgs = exports.CategoryControllerApiFetchParamCreator(configuration).updateCategory(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CategoryControllerApi - factory interface
 * @export
 */
exports.CategoryControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createCategory
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (entityParam, options) {
            return exports.CategoryControllerApiFp(configuration).createCategory(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategory: function (id, options) {
            return exports.CategoryControllerApiFp(configuration).findCategory(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listCategories
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [parentCategoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, parentCategoryId = _a.parentCategoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.CategoryControllerApiFp(configuration).listCategories({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, parentCategoryId: parentCategoryId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateCategory
         * @param {number} id id
         * @param {CategoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (id, entityParam, options) {
            return exports.CategoryControllerApiFp(configuration).updateCategory(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
var CategoryControllerApi = /** @class */ (function (_super) {
    __extends(CategoryControllerApi, _super);
    function CategoryControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createCategory
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    CategoryControllerApi.prototype.createCategory = function (entityParam, options) {
        return exports.CategoryControllerApiFp(this.configuration).createCategory(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    CategoryControllerApi.prototype.findCategory = function (id, options) {
        return exports.CategoryControllerApiFp(this.configuration).findCategory(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listCategories
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [parentCategoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    CategoryControllerApi.prototype.listCategories = function (_a) {
        var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, parentCategoryId = _a.parentCategoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.CategoryControllerApiFp(this.configuration).listCategories({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, parentCategoryId: parentCategoryId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateCategory
     * @param {number} id id
     * @param {CategoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    CategoryControllerApi.prototype.updateCategory = function (id, entityParam, options) {
        return exports.CategoryControllerApiFp(this.configuration).updateCategory(id, entityParam, options)(this.fetch, this.basePath);
    };
    return CategoryControllerApi;
}(BaseAPI));
exports.CategoryControllerApi = CategoryControllerApi;
/**
 * CustomerControllerApi - fetch parameter creator
 * @export
 */
exports.CustomerControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createCustomer.');
            }
            var localVarPath = "/customers/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomer: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findCustomer.');
            }
            var localVarPath = "/customers/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listCustomers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, movementId = _a.movementId, productId = _a.productId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/customers/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (movementId !== undefined) {
                localVarQueryParameter['movementId'] = movementId;
            }
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} id id
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateCustomer.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateCustomer.');
            }
            var localVarPath = "/customers/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
exports.CustomerControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (entityParam, options) {
            var localVarFetchArgs = exports.CustomerControllerApiFetchParamCreator(configuration).createCustomer(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomer: function (id, options) {
            var localVarFetchArgs = exports.CustomerControllerApiFetchParamCreator(configuration).findCustomer(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listCustomers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, movementId = _a.movementId, productId = _a.productId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.CustomerControllerApiFetchParamCreator(configuration).listCustomers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} id id
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (id, entityParam, options) {
            var localVarFetchArgs = exports.CustomerControllerApiFetchParamCreator(configuration).updateCustomer(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CustomerControllerApi - factory interface
 * @export
 */
exports.CustomerControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (entityParam, options) {
            return exports.CustomerControllerApiFp(configuration).createCustomer(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomer: function (id, options) {
            return exports.CustomerControllerApiFp(configuration).findCustomer(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listCustomers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, movementId = _a.movementId, productId = _a.productId, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.CustomerControllerApiFp(configuration).listCustomers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} id id
         * @param {CustomerDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (id, entityParam, options) {
            return exports.CustomerControllerApiFp(configuration).updateCustomer(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
var CustomerControllerApi = /** @class */ (function (_super) {
    __extends(CustomerControllerApi, _super);
    function CustomerControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createCustomer
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    CustomerControllerApi.prototype.createCustomer = function (entityParam, options) {
        return exports.CustomerControllerApiFp(this.configuration).createCustomer(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    CustomerControllerApi.prototype.findCustomer = function (id, options) {
        return exports.CustomerControllerApiFp(this.configuration).findCustomer(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listCustomers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    CustomerControllerApi.prototype.listCustomers = function (_a) {
        var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, movementId = _a.movementId, productId = _a.productId, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.CustomerControllerApiFp(this.configuration).listCustomers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateCustomer
     * @param {number} id id
     * @param {CustomerDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    CustomerControllerApi.prototype.updateCustomer = function (id, entityParam, options) {
        return exports.CustomerControllerApiFp(this.configuration).updateCustomer(id, entityParam, options)(this.fetch, this.basePath);
    };
    return CustomerControllerApi;
}(BaseAPI));
exports.CustomerControllerApi = CustomerControllerApi;
/**
 * MovementControllerApi - fetch parameter creator
 * @export
 */
exports.MovementControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findMovement
         * @param {number} movementId movementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovement: function (movementId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'movementId' is not null or undefined
            if (movementId === null || movementId === undefined) {
                throw new RequiredError('movementId', 'Required parameter movementId was null or undefined when calling findMovement.');
            }
            var localVarPath = "/movements/{movementId}"
                .replace("{" + "movementId" + "}", encodeURIComponent(String(movementId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary generateMovement
         * @param {MovementDto} movementInfo movementInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMovement: function (movementInfo, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'movementInfo' is not null or undefined
            if (movementInfo === null || movementInfo === undefined) {
                throw new RequiredError('movementInfo', 'Required parameter movementInfo was null or undefined when calling generateMovement.');
            }
            var localVarPath = "/movements/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(movementInfo || {}) : (movementInfo || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listMovements
         * @param {Array<number>} [movementDetailIds]
         * @param {Array<number>} [productIds]
         * @param {Array<number>} [movementTypeIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {number} [customerId]
         * @param {number} [supplierId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovements: function (_a) {
            var movementDetailIds = _a.movementDetailIds, productIds = _a.productIds, movementTypeIds = _a.movementTypeIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, customerId = _a.customerId, supplierId = _a.supplierId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/movements/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (movementDetailIds) {
                localVarQueryParameter['movementDetailIds'] = movementDetailIds;
            }
            if (productIds) {
                localVarQueryParameter['productIds'] = productIds;
            }
            if (movementTypeIds) {
                localVarQueryParameter['movementTypeIds'] = movementTypeIds;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (sourceRepositoryId !== undefined) {
                localVarQueryParameter['sourceRepositoryId'] = sourceRepositoryId;
            }
            if (targetRepositoryId !== undefined) {
                localVarQueryParameter['targetRepositoryId'] = targetRepositoryId;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            if (supplierId !== undefined) {
                localVarQueryParameter['supplierId'] = supplierId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary rollbackMovement
         * @param {number} parentMovementId parentMovementId
         * @param {MovementDto} headerInfo headerInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackMovement: function (parentMovementId, headerInfo, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'parentMovementId' is not null or undefined
            if (parentMovementId === null || parentMovementId === undefined) {
                throw new RequiredError('parentMovementId', 'Required parameter parentMovementId was null or undefined when calling rollbackMovement.');
            }
            // verify required parameter 'headerInfo' is not null or undefined
            if (headerInfo === null || headerInfo === undefined) {
                throw new RequiredError('headerInfo', 'Required parameter headerInfo was null or undefined when calling rollbackMovement.');
            }
            var localVarPath = "/movements/{parentMovementId}"
                .replace("{" + "parentMovementId" + "}", encodeURIComponent(String(parentMovementId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(headerInfo || {}) : (headerInfo || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MovementControllerApi - functional programming interface
 * @export
 */
exports.MovementControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findMovement
         * @param {number} movementId movementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovement: function (movementId, options) {
            var localVarFetchArgs = exports.MovementControllerApiFetchParamCreator(configuration).findMovement(movementId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary generateMovement
         * @param {MovementDto} movementInfo movementInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMovement: function (movementInfo, options) {
            var localVarFetchArgs = exports.MovementControllerApiFetchParamCreator(configuration).generateMovement(movementInfo, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listMovements
         * @param {Array<number>} [movementDetailIds]
         * @param {Array<number>} [productIds]
         * @param {Array<number>} [movementTypeIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {number} [customerId]
         * @param {number} [supplierId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovements: function (_a) {
            var movementDetailIds = _a.movementDetailIds, productIds = _a.productIds, movementTypeIds = _a.movementTypeIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, customerId = _a.customerId, supplierId = _a.supplierId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.MovementControllerApiFetchParamCreator(configuration).listMovements({ movementDetailIds: movementDetailIds, productIds: productIds, movementTypeIds: movementTypeIds, skip: skip, limit: limit, from: from, to: to, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, customerId: customerId, supplierId: supplierId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary rollbackMovement
         * @param {number} parentMovementId parentMovementId
         * @param {MovementDto} headerInfo headerInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackMovement: function (parentMovementId, headerInfo, options) {
            var localVarFetchArgs = exports.MovementControllerApiFetchParamCreator(configuration).rollbackMovement(parentMovementId, headerInfo, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MovementControllerApi - factory interface
 * @export
 */
exports.MovementControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary findMovement
         * @param {number} movementId movementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovement: function (movementId, options) {
            return exports.MovementControllerApiFp(configuration).findMovement(movementId, options)(fetch, basePath);
        },
        /**
         *
         * @summary generateMovement
         * @param {MovementDto} movementInfo movementInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMovement: function (movementInfo, options) {
            return exports.MovementControllerApiFp(configuration).generateMovement(movementInfo, options)(fetch, basePath);
        },
        /**
         *
         * @summary listMovements
         * @param {Array<number>} [movementDetailIds]
         * @param {Array<number>} [productIds]
         * @param {Array<number>} [movementTypeIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {number} [customerId]
         * @param {number} [supplierId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovements: function (_a) {
            var movementDetailIds = _a.movementDetailIds, productIds = _a.productIds, movementTypeIds = _a.movementTypeIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, customerId = _a.customerId, supplierId = _a.supplierId, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.MovementControllerApiFp(configuration).listMovements({ movementDetailIds: movementDetailIds, productIds: productIds, movementTypeIds: movementTypeIds, skip: skip, limit: limit, from: from, to: to, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, customerId: customerId, supplierId: supplierId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary rollbackMovement
         * @param {number} parentMovementId parentMovementId
         * @param {MovementDto} headerInfo headerInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackMovement: function (parentMovementId, headerInfo, options) {
            return exports.MovementControllerApiFp(configuration).rollbackMovement(parentMovementId, headerInfo, options)(fetch, basePath);
        },
    };
};
/**
 * MovementControllerApi - object-oriented interface
 * @export
 * @class MovementControllerApi
 * @extends {BaseAPI}
 */
var MovementControllerApi = /** @class */ (function (_super) {
    __extends(MovementControllerApi, _super);
    function MovementControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary findMovement
     * @param {number} movementId movementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    MovementControllerApi.prototype.findMovement = function (movementId, options) {
        return exports.MovementControllerApiFp(this.configuration).findMovement(movementId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary generateMovement
     * @param {MovementDto} movementInfo movementInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    MovementControllerApi.prototype.generateMovement = function (movementInfo, options) {
        return exports.MovementControllerApiFp(this.configuration).generateMovement(movementInfo, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listMovements
     * @param {Array<number>} [movementDetailIds]
     * @param {Array<number>} [productIds]
     * @param {Array<number>} [movementTypeIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {number} [customerId]
     * @param {number} [supplierId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    MovementControllerApi.prototype.listMovements = function (_a) {
        var movementDetailIds = _a.movementDetailIds, productIds = _a.productIds, movementTypeIds = _a.movementTypeIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, customerId = _a.customerId, supplierId = _a.supplierId, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.MovementControllerApiFp(this.configuration).listMovements({ movementDetailIds: movementDetailIds, productIds: productIds, movementTypeIds: movementTypeIds, skip: skip, limit: limit, from: from, to: to, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, customerId: customerId, supplierId: supplierId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary rollbackMovement
     * @param {number} parentMovementId parentMovementId
     * @param {MovementDto} headerInfo headerInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementControllerApi
     */
    MovementControllerApi.prototype.rollbackMovement = function (parentMovementId, headerInfo, options) {
        return exports.MovementControllerApiFp(this.configuration).rollbackMovement(parentMovementId, headerInfo, options)(this.fetch, this.basePath);
    };
    return MovementControllerApi;
}(BaseAPI));
exports.MovementControllerApi = MovementControllerApi;
/**
 * MovementDetailControllerApi - fetch parameter creator
 * @export
 */
exports.MovementDetailControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createMovementDetail
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementDetail: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createMovementDetail.');
            }
            var localVarPath = "/movement-details/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementDetailDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findMovementDetail
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementDetail: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findMovementDetail.');
            }
            var localVarPath = "/movement-details/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listMovementDetails
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [movementId]
         * @param {boolean} [omitPositive]
         * @param {boolean} [omitNegative]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementDetails: function (_a) {
            var productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, movementId = _a.movementId, omitPositive = _a.omitPositive, omitNegative = _a.omitNegative, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/movement-details/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (productIds) {
                localVarQueryParameter['productIds'] = productIds;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (movementId !== undefined) {
                localVarQueryParameter['movementId'] = movementId;
            }
            if (omitPositive !== undefined) {
                localVarQueryParameter['omitPositive'] = omitPositive;
            }
            if (omitNegative !== undefined) {
                localVarQueryParameter['omitNegative'] = omitNegative;
            }
            if (sourceRepositoryId !== undefined) {
                localVarQueryParameter['sourceRepositoryId'] = sourceRepositoryId;
            }
            if (targetRepositoryId !== undefined) {
                localVarQueryParameter['targetRepositoryId'] = targetRepositoryId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateMovementDetail
         * @param {number} id id
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementDetail: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateMovementDetail.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateMovementDetail.');
            }
            var localVarPath = "/movement-details/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementDetailDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MovementDetailControllerApi - functional programming interface
 * @export
 */
exports.MovementDetailControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createMovementDetail
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementDetail: function (entityParam, options) {
            var localVarFetchArgs = exports.MovementDetailControllerApiFetchParamCreator(configuration).createMovementDetail(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findMovementDetail
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementDetail: function (id, options) {
            var localVarFetchArgs = exports.MovementDetailControllerApiFetchParamCreator(configuration).findMovementDetail(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listMovementDetails
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [movementId]
         * @param {boolean} [omitPositive]
         * @param {boolean} [omitNegative]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementDetails: function (_a) {
            var productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, movementId = _a.movementId, omitPositive = _a.omitPositive, omitNegative = _a.omitNegative, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.MovementDetailControllerApiFetchParamCreator(configuration).listMovementDetails({ productIds: productIds, skip: skip, limit: limit, from: from, to: to, movementId: movementId, omitPositive: omitPositive, omitNegative: omitNegative, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateMovementDetail
         * @param {number} id id
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementDetail: function (id, entityParam, options) {
            var localVarFetchArgs = exports.MovementDetailControllerApiFetchParamCreator(configuration).updateMovementDetail(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MovementDetailControllerApi - factory interface
 * @export
 */
exports.MovementDetailControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createMovementDetail
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementDetail: function (entityParam, options) {
            return exports.MovementDetailControllerApiFp(configuration).createMovementDetail(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findMovementDetail
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementDetail: function (id, options) {
            return exports.MovementDetailControllerApiFp(configuration).findMovementDetail(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listMovementDetails
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [movementId]
         * @param {boolean} [omitPositive]
         * @param {boolean} [omitNegative]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementDetails: function (_a) {
            var productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, movementId = _a.movementId, omitPositive = _a.omitPositive, omitNegative = _a.omitNegative, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.MovementDetailControllerApiFp(configuration).listMovementDetails({ productIds: productIds, skip: skip, limit: limit, from: from, to: to, movementId: movementId, omitPositive: omitPositive, omitNegative: omitNegative, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateMovementDetail
         * @param {number} id id
         * @param {MovementDetailDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementDetail: function (id, entityParam, options) {
            return exports.MovementDetailControllerApiFp(configuration).updateMovementDetail(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * MovementDetailControllerApi - object-oriented interface
 * @export
 * @class MovementDetailControllerApi
 * @extends {BaseAPI}
 */
var MovementDetailControllerApi = /** @class */ (function (_super) {
    __extends(MovementDetailControllerApi, _super);
    function MovementDetailControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createMovementDetail
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    MovementDetailControllerApi.prototype.createMovementDetail = function (entityParam, options) {
        return exports.MovementDetailControllerApiFp(this.configuration).createMovementDetail(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findMovementDetail
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    MovementDetailControllerApi.prototype.findMovementDetail = function (id, options) {
        return exports.MovementDetailControllerApiFp(this.configuration).findMovementDetail(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listMovementDetails
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [movementId]
     * @param {boolean} [omitPositive]
     * @param {boolean} [omitNegative]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    MovementDetailControllerApi.prototype.listMovementDetails = function (_a) {
        var productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, movementId = _a.movementId, omitPositive = _a.omitPositive, omitNegative = _a.omitNegative, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.MovementDetailControllerApiFp(this.configuration).listMovementDetails({ productIds: productIds, skip: skip, limit: limit, from: from, to: to, movementId: movementId, omitPositive: omitPositive, omitNegative: omitNegative, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateMovementDetail
     * @param {number} id id
     * @param {MovementDetailDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementDetailControllerApi
     */
    MovementDetailControllerApi.prototype.updateMovementDetail = function (id, entityParam, options) {
        return exports.MovementDetailControllerApiFp(this.configuration).updateMovementDetail(id, entityParam, options)(this.fetch, this.basePath);
    };
    return MovementDetailControllerApi;
}(BaseAPI));
exports.MovementDetailControllerApi = MovementDetailControllerApi;
/**
 * MovementTypeControllerApi - fetch parameter creator
 * @export
 */
exports.MovementTypeControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createMovementType
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementType: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createMovementType.');
            }
            var localVarPath = "/movement-types/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementTypeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findMovementType
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementType: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findMovementType.');
            }
            var localVarPath = "/movement-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listMovementTypes
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementTypes: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/movement-types/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (sourceRepositoryId !== undefined) {
                localVarQueryParameter['sourceRepositoryId'] = sourceRepositoryId;
            }
            if (targetRepositoryId !== undefined) {
                localVarQueryParameter['targetRepositoryId'] = targetRepositoryId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateMovementType
         * @param {number} id id
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementType: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateMovementType.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateMovementType.');
            }
            var localVarPath = "/movement-types/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MovementTypeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MovementTypeControllerApi - functional programming interface
 * @export
 */
exports.MovementTypeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createMovementType
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementType: function (entityParam, options) {
            var localVarFetchArgs = exports.MovementTypeControllerApiFetchParamCreator(configuration).createMovementType(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findMovementType
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementType: function (id, options) {
            var localVarFetchArgs = exports.MovementTypeControllerApiFetchParamCreator(configuration).findMovementType(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listMovementTypes
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementTypes: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.MovementTypeControllerApiFetchParamCreator(configuration).listMovementTypes({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateMovementType
         * @param {number} id id
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementType: function (id, entityParam, options) {
            var localVarFetchArgs = exports.MovementTypeControllerApiFetchParamCreator(configuration).updateMovementType(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MovementTypeControllerApi - factory interface
 * @export
 */
exports.MovementTypeControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createMovementType
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovementType: function (entityParam, options) {
            return exports.MovementTypeControllerApiFp(configuration).createMovementType(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findMovementType
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMovementType: function (id, options) {
            return exports.MovementTypeControllerApiFp(configuration).findMovementType(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listMovementTypes
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [sourceRepositoryId]
         * @param {number} [targetRepositoryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovementTypes: function (_a) {
            var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.MovementTypeControllerApiFp(configuration).listMovementTypes({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateMovementType
         * @param {number} id id
         * @param {MovementTypeDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovementType: function (id, entityParam, options) {
            return exports.MovementTypeControllerApiFp(configuration).updateMovementType(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * MovementTypeControllerApi - object-oriented interface
 * @export
 * @class MovementTypeControllerApi
 * @extends {BaseAPI}
 */
var MovementTypeControllerApi = /** @class */ (function (_super) {
    __extends(MovementTypeControllerApi, _super);
    function MovementTypeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createMovementType
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    MovementTypeControllerApi.prototype.createMovementType = function (entityParam, options) {
        return exports.MovementTypeControllerApiFp(this.configuration).createMovementType(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findMovementType
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    MovementTypeControllerApi.prototype.findMovementType = function (id, options) {
        return exports.MovementTypeControllerApiFp(this.configuration).findMovementType(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listMovementTypes
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [sourceRepositoryId]
     * @param {number} [targetRepositoryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    MovementTypeControllerApi.prototype.listMovementTypes = function (_a) {
        var skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, sourceRepositoryId = _a.sourceRepositoryId, targetRepositoryId = _a.targetRepositoryId, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.MovementTypeControllerApiFp(this.configuration).listMovementTypes({ skip: skip, limit: limit, from: from, to: to, name: name, description: description, sourceRepositoryId: sourceRepositoryId, targetRepositoryId: targetRepositoryId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateMovementType
     * @param {number} id id
     * @param {MovementTypeDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovementTypeControllerApi
     */
    MovementTypeControllerApi.prototype.updateMovementType = function (id, entityParam, options) {
        return exports.MovementTypeControllerApiFp(this.configuration).updateMovementType(id, entityParam, options)(this.fetch, this.basePath);
    };
    return MovementTypeControllerApi;
}(BaseAPI));
exports.MovementTypeControllerApi = MovementTypeControllerApi;
/**
 * ProductControllerApi - fetch parameter creator
 * @export
 */
exports.ProductControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createProduct
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createProduct.');
            }
            var localVarPath = "/products/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProductDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findProduct.');
            }
            var localVarPath = "/products/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listProducts
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (_a) {
            var sourceSupplierIds = _a.sourceSupplierIds, customerIds = _a.customerIds, supplierIds = _a.supplierIds, categoryIds = _a.categoryIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/products/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sourceSupplierIds) {
                localVarQueryParameter['sourceSupplierIds'] = sourceSupplierIds;
            }
            if (customerIds) {
                localVarQueryParameter['customerIds'] = customerIds;
            }
            if (supplierIds) {
                localVarQueryParameter['supplierIds'] = supplierIds;
            }
            if (categoryIds) {
                localVarQueryParameter['categoryIds'] = categoryIds;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateProduct
         * @param {number} id id
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateProduct.');
            }
            var localVarPath = "/products/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProductDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProductControllerApi - functional programming interface
 * @export
 */
exports.ProductControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createProduct
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (entityParam, options) {
            var localVarFetchArgs = exports.ProductControllerApiFetchParamCreator(configuration).createProduct(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (id, options) {
            var localVarFetchArgs = exports.ProductControllerApiFetchParamCreator(configuration).findProduct(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listProducts
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (_a) {
            var sourceSupplierIds = _a.sourceSupplierIds, customerIds = _a.customerIds, supplierIds = _a.supplierIds, categoryIds = _a.categoryIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.ProductControllerApiFetchParamCreator(configuration).listProducts({ sourceSupplierIds: sourceSupplierIds, customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateProduct
         * @param {number} id id
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (id, entityParam, options) {
            var localVarFetchArgs = exports.ProductControllerApiFetchParamCreator(configuration).updateProduct(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProductControllerApi - factory interface
 * @export
 */
exports.ProductControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createProduct
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (entityParam, options) {
            return exports.ProductControllerApiFp(configuration).createProduct(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProduct: function (id, options) {
            return exports.ProductControllerApiFp(configuration).findProduct(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listProducts
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: function (_a) {
            var sourceSupplierIds = _a.sourceSupplierIds, customerIds = _a.customerIds, supplierIds = _a.supplierIds, categoryIds = _a.categoryIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, _b = _a.options, options = _b === void 0 ? {} : _b;
            return exports.ProductControllerApiFp(configuration).listProducts({ sourceSupplierIds: sourceSupplierIds, customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateProduct
         * @param {number} id id
         * @param {ProductDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (id, entityParam, options) {
            return exports.ProductControllerApiFp(configuration).updateProduct(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * ProductControllerApi - object-oriented interface
 * @export
 * @class ProductControllerApi
 * @extends {BaseAPI}
 */
var ProductControllerApi = /** @class */ (function (_super) {
    __extends(ProductControllerApi, _super);
    function ProductControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createProduct
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    ProductControllerApi.prototype.createProduct = function (entityParam, options) {
        return exports.ProductControllerApiFp(this.configuration).createProduct(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    ProductControllerApi.prototype.findProduct = function (id, options) {
        return exports.ProductControllerApiFp(this.configuration).findProduct(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listProducts
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    ProductControllerApi.prototype.listProducts = function (_a) {
        var sourceSupplierIds = _a.sourceSupplierIds, customerIds = _a.customerIds, supplierIds = _a.supplierIds, categoryIds = _a.categoryIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, _b = _a.options, options = _b === void 0 ? {} : _b;
        return exports.ProductControllerApiFp(this.configuration).listProducts({ sourceSupplierIds: sourceSupplierIds, customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateProduct
     * @param {number} id id
     * @param {ProductDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    ProductControllerApi.prototype.updateProduct = function (id, entityParam, options) {
        return exports.ProductControllerApiFp(this.configuration).updateProduct(id, entityParam, options)(this.fetch, this.basePath);
    };
    return ProductControllerApi;
}(BaseAPI));
exports.ProductControllerApi = ProductControllerApi;
/**
 * ProductRepositoryControllerApi - fetch parameter creator
 * @export
 */
exports.ProductRepositoryControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createProductRepository
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductRepository: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createProductRepository.');
            }
            var localVarPath = "/product-repositories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProductRepositoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findProductRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductRepository: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findProductRepository.');
            }
            var localVarPath = "/product-repositories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listProductRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [repositoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductRepositories: function (_a) {
            var customerIds = _a.customerIds, supplierIds = _a.supplierIds, sourceSupplierIds = _a.sourceSupplierIds, categoryIds = _a.categoryIds, repositoryIds = _a.repositoryIds, productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/product-repositories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (customerIds) {
                localVarQueryParameter['customerIds'] = customerIds;
            }
            if (supplierIds) {
                localVarQueryParameter['supplierIds'] = supplierIds;
            }
            if (sourceSupplierIds) {
                localVarQueryParameter['sourceSupplierIds'] = sourceSupplierIds;
            }
            if (categoryIds) {
                localVarQueryParameter['categoryIds'] = categoryIds;
            }
            if (repositoryIds) {
                localVarQueryParameter['repositoryIds'] = repositoryIds;
            }
            if (productIds) {
                localVarQueryParameter['productIds'] = productIds;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateProductRepository
         * @param {number} id id
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductRepository: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateProductRepository.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateProductRepository.');
            }
            var localVarPath = "/product-repositories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProductRepositoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProductRepositoryControllerApi - functional programming interface
 * @export
 */
exports.ProductRepositoryControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createProductRepository
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductRepository: function (entityParam, options) {
            var localVarFetchArgs = exports.ProductRepositoryControllerApiFetchParamCreator(configuration).createProductRepository(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findProductRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductRepository: function (id, options) {
            var localVarFetchArgs = exports.ProductRepositoryControllerApiFetchParamCreator(configuration).findProductRepository(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listProductRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [repositoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductRepositories: function (_a) {
            var customerIds = _a.customerIds, supplierIds = _a.supplierIds, sourceSupplierIds = _a.sourceSupplierIds, categoryIds = _a.categoryIds, repositoryIds = _a.repositoryIds, productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarFetchArgs = exports.ProductRepositoryControllerApiFetchParamCreator(configuration).listProductRepositories({ customerIds: customerIds, supplierIds: supplierIds, sourceSupplierIds: sourceSupplierIds, categoryIds: categoryIds, repositoryIds: repositoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateProductRepository
         * @param {number} id id
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductRepository: function (id, entityParam, options) {
            var localVarFetchArgs = exports.ProductRepositoryControllerApiFetchParamCreator(configuration).updateProductRepository(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProductRepositoryControllerApi - factory interface
 * @export
 */
exports.ProductRepositoryControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createProductRepository
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductRepository: function (entityParam, options) {
            return exports.ProductRepositoryControllerApiFp(configuration).createProductRepository(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findProductRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductRepository: function (id, options) {
            return exports.ProductRepositoryControllerApiFp(configuration).findProductRepository(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listProductRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [sourceSupplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [repositoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductRepositories: function (_a) {
            var _b = _a === void 0 ? {} : _a, customerIds = _b.customerIds, supplierIds = _b.supplierIds, sourceSupplierIds = _b.sourceSupplierIds, categoryIds = _b.categoryIds, repositoryIds = _b.repositoryIds, productIds = _b.productIds, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, options = _b.options;
            return exports.ProductRepositoryControllerApiFp(configuration).listProductRepositories({ customerIds: customerIds, supplierIds: supplierIds, sourceSupplierIds: sourceSupplierIds, categoryIds: categoryIds, repositoryIds: repositoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateProductRepository
         * @param {number} id id
         * @param {ProductRepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductRepository: function (id, entityParam, options) {
            return exports.ProductRepositoryControllerApiFp(configuration).updateProductRepository(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * ProductRepositoryControllerApi - object-oriented interface
 * @export
 * @class ProductRepositoryControllerApi
 * @extends {BaseAPI}
 */
var ProductRepositoryControllerApi = /** @class */ (function (_super) {
    __extends(ProductRepositoryControllerApi, _super);
    function ProductRepositoryControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createProductRepository
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    ProductRepositoryControllerApi.prototype.createProductRepository = function (entityParam, options) {
        return exports.ProductRepositoryControllerApiFp(this.configuration).createProductRepository(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findProductRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    ProductRepositoryControllerApi.prototype.findProductRepository = function (id, options) {
        return exports.ProductRepositoryControllerApiFp(this.configuration).findProductRepository(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listProductRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [sourceSupplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [repositoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    ProductRepositoryControllerApi.prototype.listProductRepositories = function (_a) {
        var _b = _a === void 0 ? {} : _a, customerIds = _b.customerIds, supplierIds = _b.supplierIds, sourceSupplierIds = _b.sourceSupplierIds, categoryIds = _b.categoryIds, repositoryIds = _b.repositoryIds, productIds = _b.productIds, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, options = _b.options;
        return exports.ProductRepositoryControllerApiFp(this.configuration).listProductRepositories({ customerIds: customerIds, supplierIds: supplierIds, sourceSupplierIds: sourceSupplierIds, categoryIds: categoryIds, repositoryIds: repositoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateProductRepository
     * @param {number} id id
     * @param {ProductRepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRepositoryControllerApi
     */
    ProductRepositoryControllerApi.prototype.updateProductRepository = function (id, entityParam, options) {
        return exports.ProductRepositoryControllerApiFp(this.configuration).updateProductRepository(id, entityParam, options)(this.fetch, this.basePath);
    };
    return ProductRepositoryControllerApi;
}(BaseAPI));
exports.ProductRepositoryControllerApi = ProductRepositoryControllerApi;
/**
 * RepositoryControllerApi - fetch parameter creator
 * @export
 */
exports.RepositoryControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createRepository
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createRepository.');
            }
            var localVarPath = "/repositories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RepositoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRepository: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findRepository.');
            }
            var localVarPath = "/repositories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositories: function (_a) {
            var customerIds = _a.customerIds, supplierIds = _a.supplierIds, categoryIds = _a.categoryIds, productIds = _a.productIds, skip = _a.skip, limit = _a.limit, from = _a.from, to = _a.to, name = _a.name, description = _a.description, _b = _a.options, options = _b === void 0 ? {} : _b;
            var localVarPath = "/repositories/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (customerIds) {
                localVarQueryParameter['customerIds'] = customerIds;
            }
            if (supplierIds) {
                localVarQueryParameter['supplierIds'] = supplierIds;
            }
            if (categoryIds) {
                localVarQueryParameter['categoryIds'] = categoryIds;
            }
            if (productIds) {
                localVarQueryParameter['productIds'] = productIds;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateRepository
         * @param {number} id id
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateRepository.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateRepository.');
            }
            var localVarPath = "/repositories/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RepositoryDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RepositoryControllerApi - functional programming interface
 * @export
 */
exports.RepositoryControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createRepository
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository: function (entityParam, options) {
            var localVarFetchArgs = exports.RepositoryControllerApiFetchParamCreator(configuration).createRepository(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRepository: function (id, options) {
            var localVarFetchArgs = exports.RepositoryControllerApiFetchParamCreator(configuration).findRepository(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositories: function (_a) {
            var _b = _a === void 0 ? {} : _a, customerIds = _b.customerIds, supplierIds = _b.supplierIds, categoryIds = _b.categoryIds, productIds = _b.productIds, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, description = _b.description, options = _b.options;
            var localVarFetchArgs = exports.RepositoryControllerApiFetchParamCreator(configuration).listRepositories({ customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateRepository
         * @param {number} id id
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository: function (id, entityParam, options) {
            var localVarFetchArgs = exports.RepositoryControllerApiFetchParamCreator(configuration).updateRepository(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RepositoryControllerApi - factory interface
 * @export
 */
exports.RepositoryControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createRepository
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository: function (entityParam, options) {
            return exports.RepositoryControllerApiFp(configuration).createRepository(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findRepository
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRepository: function (id, options) {
            return exports.RepositoryControllerApiFp(configuration).findRepository(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listRepositories
         * @param {Array<number>} [customerIds]
         * @param {Array<number>} [supplierIds]
         * @param {Array<number>} [categoryIds]
         * @param {Array<number>} [productIds]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositories: function (_a) {
            var _b = _a === void 0 ? {} : _a, customerIds = _b.customerIds, supplierIds = _b.supplierIds, categoryIds = _b.categoryIds, productIds = _b.productIds, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, description = _b.description, options = _b.options;
            return exports.RepositoryControllerApiFp(configuration).listRepositories({ customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateRepository
         * @param {number} id id
         * @param {RepositoryDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository: function (id, entityParam, options) {
            return exports.RepositoryControllerApiFp(configuration).updateRepository(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * RepositoryControllerApi - object-oriented interface
 * @export
 * @class RepositoryControllerApi
 * @extends {BaseAPI}
 */
var RepositoryControllerApi = /** @class */ (function (_super) {
    __extends(RepositoryControllerApi, _super);
    function RepositoryControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createRepository
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    RepositoryControllerApi.prototype.createRepository = function (entityParam, options) {
        return exports.RepositoryControllerApiFp(this.configuration).createRepository(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findRepository
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    RepositoryControllerApi.prototype.findRepository = function (id, options) {
        return exports.RepositoryControllerApiFp(this.configuration).findRepository(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listRepositories
     * @param {Array<number>} [customerIds]
     * @param {Array<number>} [supplierIds]
     * @param {Array<number>} [categoryIds]
     * @param {Array<number>} [productIds]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    RepositoryControllerApi.prototype.listRepositories = function (_a) {
        var _b = _a === void 0 ? {} : _a, customerIds = _b.customerIds, supplierIds = _b.supplierIds, categoryIds = _b.categoryIds, productIds = _b.productIds, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, description = _b.description, options = _b.options;
        return exports.RepositoryControllerApiFp(this.configuration).listRepositories({ customerIds: customerIds, supplierIds: supplierIds, categoryIds: categoryIds, productIds: productIds, skip: skip, limit: limit, from: from, to: to, name: name, description: description, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateRepository
     * @param {number} id id
     * @param {RepositoryDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoryControllerApi
     */
    RepositoryControllerApi.prototype.updateRepository = function (id, entityParam, options) {
        return exports.RepositoryControllerApiFp(this.configuration).updateRepository(id, entityParam, options)(this.fetch, this.basePath);
    };
    return RepositoryControllerApi;
}(BaseAPI));
exports.RepositoryControllerApi = RepositoryControllerApi;
/**
 * RootControllerApi - fetch parameter creator
 * @export
 */
exports.RootControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary heartBeat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartBeat: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RootControllerApi - functional programming interface
 * @export
 */
exports.RootControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary heartBeat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartBeat: function (options) {
            var localVarFetchArgs = exports.RootControllerApiFetchParamCreator(configuration).heartBeat(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RootControllerApi - factory interface
 * @export
 */
exports.RootControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary heartBeat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartBeat: function (options) {
            return exports.RootControllerApiFp(configuration).heartBeat(options)(fetch, basePath);
        },
    };
};
/**
 * RootControllerApi - object-oriented interface
 * @export
 * @class RootControllerApi
 * @extends {BaseAPI}
 */
var RootControllerApi = /** @class */ (function (_super) {
    __extends(RootControllerApi, _super);
    function RootControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary heartBeat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootControllerApi
     */
    RootControllerApi.prototype.heartBeat = function (options) {
        return exports.RootControllerApiFp(this.configuration).heartBeat(options)(this.fetch, this.basePath);
    };
    return RootControllerApi;
}(BaseAPI));
exports.RootControllerApi = RootControllerApi;
/**
 * SupplierControllerApi - fetch parameter creator
 * @export
 */
exports.SupplierControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createSupplier
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplier: function (entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling createSupplier.');
            }
            var localVarPath = "/suppliers/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SupplierDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary findSupplier
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSupplier: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling findSupplier.');
            }
            var localVarPath = "/suppliers/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary listSuppliers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuppliers: function (_a) {
            var _b = _a === void 0 ? {} : _a, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, movementId = _b.movementId, productId = _b.productId, _c = _b.options, options = _c === void 0 ? {} : _c;
            var localVarPath = "/suppliers/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from.toISOString();
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to.toISOString();
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (movementId !== undefined) {
                localVarQueryParameter['movementId'] = movementId;
            }
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary updateSupplier
         * @param {number} id id
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier: function (id, entityParam, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSupplier.');
            }
            // verify required parameter 'entityParam' is not null or undefined
            if (entityParam === null || entityParam === undefined) {
                throw new RequiredError('entityParam', 'Required parameter entityParam was null or undefined when calling updateSupplier.');
            }
            var localVarPath = "/suppliers/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SupplierDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(entityParam || {}) : (entityParam || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SupplierControllerApi - functional programming interface
 * @export
 */
exports.SupplierControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createSupplier
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplier: function (entityParam, options) {
            var localVarFetchArgs = exports.SupplierControllerApiFetchParamCreator(configuration).createSupplier(entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary findSupplier
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSupplier: function (id, options) {
            var localVarFetchArgs = exports.SupplierControllerApiFetchParamCreator(configuration).findSupplier(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary listSuppliers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuppliers: function (_a) {
            var _b = _a === void 0 ? {} : _a, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, movementId = _b.movementId, productId = _b.productId, options = _b.options;
            var localVarFetchArgs = exports.SupplierControllerApiFetchParamCreator(configuration).listSuppliers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options });
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary updateSupplier
         * @param {number} id id
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier: function (id, entityParam, options) {
            var localVarFetchArgs = exports.SupplierControllerApiFetchParamCreator(configuration).updateSupplier(id, entityParam, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SupplierControllerApi - factory interface
 * @export
 */
exports.SupplierControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary createSupplier
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplier: function (entityParam, options) {
            return exports.SupplierControllerApiFp(configuration).createSupplier(entityParam, options)(fetch, basePath);
        },
        /**
         *
         * @summary findSupplier
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSupplier: function (id, options) {
            return exports.SupplierControllerApiFp(configuration).findSupplier(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary listSuppliers
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [name]
         * @param {number} [movementId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuppliers: function (_a) {
            var _b = _a === void 0 ? {} : _a, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, movementId = _b.movementId, productId = _b.productId, options = _b.options;
            return exports.SupplierControllerApiFp(configuration).listSuppliers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options })(fetch, basePath);
        },
        /**
         *
         * @summary updateSupplier
         * @param {number} id id
         * @param {SupplierDto} entityParam entityParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier: function (id, entityParam, options) {
            return exports.SupplierControllerApiFp(configuration).updateSupplier(id, entityParam, options)(fetch, basePath);
        },
    };
};
/**
 * SupplierControllerApi - object-oriented interface
 * @export
 * @class SupplierControllerApi
 * @extends {BaseAPI}
 */
var SupplierControllerApi = /** @class */ (function (_super) {
    __extends(SupplierControllerApi, _super);
    function SupplierControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createSupplier
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    SupplierControllerApi.prototype.createSupplier = function (entityParam, options) {
        return exports.SupplierControllerApiFp(this.configuration).createSupplier(entityParam, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findSupplier
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    SupplierControllerApi.prototype.findSupplier = function (id, options) {
        return exports.SupplierControllerApiFp(this.configuration).findSupplier(id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary listSuppliers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [name]
     * @param {number} [movementId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    SupplierControllerApi.prototype.listSuppliers = function (_a) {
        var _b = _a === void 0 ? {} : _a, skip = _b.skip, limit = _b.limit, from = _b.from, to = _b.to, name = _b.name, movementId = _b.movementId, productId = _b.productId, options = _b.options;
        return exports.SupplierControllerApiFp(this.configuration).listSuppliers({ skip: skip, limit: limit, from: from, to: to, name: name, movementId: movementId, productId: productId, options: options })(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateSupplier
     * @param {number} id id
     * @param {SupplierDto} entityParam entityParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    SupplierControllerApi.prototype.updateSupplier = function (id, entityParam, options) {
        return exports.SupplierControllerApiFp(this.configuration).updateSupplier(id, entityParam, options)(this.fetch, this.basePath);
    };
    return SupplierControllerApi;
}(BaseAPI));
exports.SupplierControllerApi = SupplierControllerApi;
