/**
 * Inventory Management System
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProductRepositoryDto', 'model/ResponseCanonicalListProductRepositoryDto', 'model/ResponseCanonicalProductRepositoryDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProductRepositoryDto'), require('../model/ResponseCanonicalListProductRepositoryDto'), require('../model/ResponseCanonicalProductRepositoryDto'));
  } else {
    // Browser globals (root is window)
    if (!root.InventoryManagementSystem) {
      root.InventoryManagementSystem = {};
    }
    root.InventoryManagementSystem.ProductRepositoryControllerApi = factory(root.InventoryManagementSystem.ApiClient, root.InventoryManagementSystem.ProductRepositoryDto, root.InventoryManagementSystem.ResponseCanonicalListProductRepositoryDto, root.InventoryManagementSystem.ResponseCanonicalProductRepositoryDto);
  }
}(this, function(ApiClient, ProductRepositoryDto, ResponseCanonicalListProductRepositoryDto, ResponseCanonicalProductRepositoryDto) {
  'use strict';

  /**
   * ProductRepositoryController service.
   * @module api/ProductRepositoryControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new ProductRepositoryControllerApi. 
   * @alias module:api/ProductRepositoryControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createProductRepositoryUsingPOST operation.
     * @callback module:api/ProductRepositoryControllerApi~createProductRepositoryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseCanonicalProductRepositoryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createProductRepository
     * @param {module:model/ProductRepositoryDto} entityParam entityParam
     * @param {module:api/ProductRepositoryControllerApi~createProductRepositoryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseCanonicalProductRepositoryDto}
     */
    this.createProductRepositoryUsingPOST = function(entityParam, callback) {
      var postBody = entityParam;

      // verify the required parameter 'entityParam' is set
      if (entityParam === undefined || entityParam === null) {
        throw new Error("Missing the required parameter 'entityParam' when calling createProductRepositoryUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResponseCanonicalProductRepositoryDto;

      return this.apiClient.callApi(
        '/product-repositories/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findProductRepositoryUsingGET operation.
     * @callback module:api/ProductRepositoryControllerApi~findProductRepositoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseCanonicalProductRepositoryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findProductRepository
     * @param {Number} id id
     * @param {module:api/ProductRepositoryControllerApi~findProductRepositoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseCanonicalProductRepositoryDto}
     */
    this.findProductRepositoryUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findProductRepositoryUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResponseCanonicalProductRepositoryDto;

      return this.apiClient.callApi(
        '/product-repositories/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductRepositoriesUsingGET operation.
     * @callback module:api/ProductRepositoryControllerApi~listProductRepositoriesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseCanonicalListProductRepositoryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listProductRepositories
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.customerIds 
     * @param {Array.<Number>} opts.supplierIds 
     * @param {Array.<Number>} opts.sourceSupplierIds 
     * @param {Array.<Number>} opts.categoryIds 
     * @param {Array.<Number>} opts.repositoryIds 
     * @param {Array.<Number>} opts.productIds 
     * @param {Number} opts.skip 
     * @param {Number} opts.limit 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:api/ProductRepositoryControllerApi~listProductRepositoriesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseCanonicalListProductRepositoryDto}
     */
    this.listProductRepositoriesUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
        'customerIds': {
          value: opts['customerIds'],
          collectionFormat: 'multi'
        },
        'supplierIds': {
          value: opts['supplierIds'],
          collectionFormat: 'multi'
        },
        'sourceSupplierIds': {
          value: opts['sourceSupplierIds'],
          collectionFormat: 'multi'
        },
        'categoryIds': {
          value: opts['categoryIds'],
          collectionFormat: 'multi'
        },
        'repositoryIds': {
          value: opts['repositoryIds'],
          collectionFormat: 'multi'
        },
        'productIds': {
          value: opts['productIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResponseCanonicalListProductRepositoryDto;

      return this.apiClient.callApi(
        '/product-repositories/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductRepositoryUsingPUT operation.
     * @callback module:api/ProductRepositoryControllerApi~updateProductRepositoryUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseCanonicalProductRepositoryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateProductRepository
     * @param {Number} id id
     * @param {module:model/ProductRepositoryDto} entityParam entityParam
     * @param {module:api/ProductRepositoryControllerApi~updateProductRepositoryUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseCanonicalProductRepositoryDto}
     */
    this.updateProductRepositoryUsingPUT = function(id, entityParam, callback) {
      var postBody = entityParam;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProductRepositoryUsingPUT");
      }

      // verify the required parameter 'entityParam' is set
      if (entityParam === undefined || entityParam === null) {
        throw new Error("Missing the required parameter 'entityParam' when calling updateProductRepositoryUsingPUT");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResponseCanonicalProductRepositoryDto;

      return this.apiClient.callApi(
        '/product-repositories/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
